---
title: "Data Organization"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---


## Data Organization: File Structure

For each R project/manuscript, create a set of folders. There are many options:

- /ProjectName
  - /RawData
  - /ProcessedData
  - /Analysis
  - /Plots
  - `README.txt`
  - `Project_Notes.qmd`


## Data Organization: File Structure {.smaller}

  - Raw Data
    - raw data (read-only, pristine backup, not to be touched)
  - Processed Data
    - intermediate and final R datasets (any dataset produced by a script)
  - Analysis
  - Plots
  - ReadMe and/or ProjectNotes
    - list the driving questions and purposes of the project
    - metadata & instructions for reproducing all analyses and plots
    - entries and notes for each time you work on the analysis
    
Note: Your code will stay cleaner if you use many smaller scripts, e.g., one for analyses, one for  figures *or* one for each analysis and the associated figures


## Data Storage: General Tips {.smaller}

- Think about how to store your data *before* you start
    - Sometimes it is difficult to change things later
- Keep everything
    - Disk space is cheap
    - Dropbox / Box / Google Drive / OneDrive, etc.
    - Iterate file names (*better* -- use version control)
- Create a data dictionary in your metadata folder (explanations of what your columns represent)
    - "Body mass in grams, measured to nearest 0.1 g."
- Be consistent
    - File names, variable names, file formats, etc.


## Data Storage: Data Files {.smaller}

See [Broman and Woo: Data Organization in Spreadsheets](https://kbroman.org/dataorg/)

1. Store data in rectangular format
    - **No empty cells**, no merged cells, repeat values if necessary
    - Each unique observation unit is a row
1. Use only one header row
1. R is case sensitive so keep column headers in a case structure  (snake_case, dot.case, CamelCase)
    - No spaces or units in column names, e.g., `body_mass` or `BodyMass` but not "Body Mass" or "Body Mass (g)"
1. Use `NA` for missing data
1. One thing in each cell. Notes get their own column. Use words, not highlighting or color for metadata
1. Store dates as three separate columns (`Year`, `Month`, `Day`)
    - Excel does weird things with dates


## Examples: Bad and good

![](../images/Excel_1.png){fig-align="center"}


## Examples: Bad and good

![](../images/Excel_2.png){fig-align="center"}


## It would be nice to store data in csv files and edit in Excel, but... {.nostretch}

![](https://i.imgur.com/AiwZwdq.png){fig-align="center" width=70%}


## and {.nostretch}

![](https://i.imgur.com/YlwLXJN.png){fig-align="center" width=60%}

Working with csv files in Excel *not* a viable (i.e., non-aggravating) option.

- If you are entering data, use `.xlsx`
- If you are outputting data from another program, use `.csv` or tab-delimited `.txt`/`.tbd`


## Tidy Data {.smaller}

Many ways to represent the same set of data in tables, but not all are tidy.

![](https://i.imgur.com/DrgbZQw.png){fig-align="center"}

<br />
<br />

*This is a dataset of tuberculosis cases in 1999 and 2000 from several countries from the World Health Organization. All are in the `tidyverse` package (`table1`, `table2`, and `table3`).*


## Tidy Rules

Three interrelated rules make a dataset tidy:

  1. Each variable must have its own column.
  1. Each observation must have its own row.
  1. Each value must have its own cell.
  

![](https://i.imgur.com/qav6ips.png){fig-align="center"}
 

## Which Dataset is Tidy?

![](https://i.imgur.com/DrgbZQw.png){fig-align="center"}

. . .

`table2` because only one column has values.


## How to Create Tidy Data

1. Enter data in a tidy format
    - Usually not ideal for easy collection and entry (use wide format)
1. Make your data tidy in R during data wrangling steps
    - `pivot_longer()`
    - `pivot_wider()`

Learn to go back and forth between long (tidy) and wide.


## Data Storage and Relational Data {.smaller}

-  Strive for relational data to keep your file sizes small 
    - Store data as smaller units (hierarchical and by type) and link through code
    - Use shared IDs so that you can match and merge data across files
- Use code to link by shared IDs
    - This helps avoid confusion and repetition
    - Great for large, interconnected datasets, especially those that can change
    - Data management systems play well with data in this format (e.g., Tidy, SQL)


## Data Storage and Relational Data

- Avoid "monolithic" files with redundant data
- Relate smaller data files to each other by *keys*
- Join files together for analysis

:::: {.columns}

::: {.column width="50%"}
![](../images/Excel_1.png){fig-align="center"}
:::

::: {.column width="50%"}
![](../images/Excel_3.png){fig-align="center"}
:::

::::


## Analysis workflow - Tidy Data {.nostretch}

![](https://i.imgur.com/fDpfRDA.png){fig-align="center" width=85%}


## References

::: {#refs}
:::
