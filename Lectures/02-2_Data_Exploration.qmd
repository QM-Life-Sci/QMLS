---
title: "Data Exploration"
subtitle: "Loading and Initial Exploration"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(readxl)

```


## Base R {.nostretch}

- Base R refers to the set of code and functions that is automatically included when you install R

![](../images/Base_ex.png){width=60% fig-align="center"}

## The Tidyverse {.nostretch}

![](https://i.imgur.com/fHQecxu.png){fig-align="center" width=40%}

- Extensions for reading, writing, and working with data (selecting, filtering, aggregating, plotting)
- Core Tidyverse packages: ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats. 
- `install.packages("tidyverse")`  
  

## The Tidyverse

You may notice when you load the tidyverse you get a message that says that some libraries overwrite functions in base R. 
  
- For example, dplyr overwrites `filter()` and `lag()`.
    - To use functions from a specific package, you will need to use their full names: `stats::filter()` and `stats::lag()`.

## Should I learn/use base R or Tidyverse?

- Both are useful 
    - Learn the basics of both
    - Learn when one tools is better suited 
    

## Analysis workflow - Tidy Data {.nostretch}

![](https://i.imgur.com/fDpfRDA.png){fig-align="center" width=50%} 

Perform all manipulation via code (in R)
- preserves data integrity
- the "hard" way now is the easy way in the long run
  
## Reading delimited files into R

- csv: `read.csv()`
- tab or otherwise delimited: `read.table()`
- [readr](https://cran.r-project.org/web/packages/readr/index.html), loaded with `tidyverse`
    - `read_delim()`
    - `read_csv()`
    - Like their base R counterparts but with more logical default arguments & behavior

## Tibbles 

The tidyverse (via `read_csv()`) reads in files as tibbles instead of data.frames.

-   Also `read_excel()`, `read_table()`, etc

```{r}
#| echo: true
#| message: false

dat <- read_csv("../data/composition_data.csv")
dat

```


## Reading Excel files into R

Preferred package: [readxl](https://cran.r-project.org/web/packages/readxl/index.html)  

```{r}
#| echo: true
#| eval: false

library(readxl)
MM <- read_excel("MyFile.xlsx")

```

## Where do your files live?

- To load data into R, you need to tell it where the file is on your computer. 
- R will look relative to the "working directory"
- ALWAYS set this to the "Source File Location" (this is where the script is)
    - Quarto will ALWAYS render this way
    - Do not use `setwd()`

## Telling R where to look

```{r}
#| echo: true
#| message: false
#| warning: false


MM <- read_excel("../data/Mouse_Weaning_Data.xlsx",
                na = "NA")
```

Read file and assign to an object `MM`.

- Look for it in the `data` directory, which is one level up from the working directory (`../`)
- Explicitly define "NA" is `NA`


## Getting basic information: base 

```{r}
#| echo: true

str(MM)

```

## Getting basic information: tidyverse

```{r}
#| echo: true

glimpse(MM)

```

## Analysis workflow - Tidy Data {.nostretch}

![](https://i.imgur.com/fDpfRDA.png){fig-align="center"}

## Moving between wide and long (tidy data)

Two important functions to learn:  

1.  **`pivot_longer()`** - when some of the column names are not the names of variables but the *values* of the variables
    
1.  **`pivot_wider()`** - when an observation for a single ID is scattered across multiple rows

## `pivot_longer()`

Column names are not the names of variables but the *values* of the variables.


```{r}
table4a
```

- Here for example, 1999 and 2000 are both values of the variable year
  
  
## `pivot_longer()` {.nostretch} 
  
```{r}
#| echo: true
#| eval: true

table4a 

pivot_longer(table4a, c("1999", "2000"), names_to = "year", values_to = "cases")

```

## `pivot_longer()` 

![](https://imgur.com/157Odvw.png){fig-align="center"}

## `pivot_wider()`

Observation is scattered across multiple rows. 

- Here for example, data from Afghanistan in 1999 is in multiple rows


```{r}
print(table2, n = 8, width = Inf)
```

## `pivot_wider()`

```{r}
#| echo: true

table2 %>%
  pivot_wider(names_from = type, values_from = count) %>% 
  print(n = 4)
```

## `pivot_wider()` {.nostretch}

![](https://imgur.com/bWvSwUw.png){fig-align="center"}

## Selecting and filtering

- Selecting columns
- Filtering a subset of rows

## Selecting columns: Base R

```{r}
#| echo: true
#| eval: false

MM$WnMass

```

`$` returns a single column from a `data.frame`. You'll use this form most often day to day.


## Selecting columns: Base R

```{r}
#| echo: true
#| eval: false

MM[ , "WnMass"]  # Only the column WnMass
MM[ , 1:3]       # Columns 1-3, all rows

```

`[rows, columns]` returns rows and columns from a `data.frame`.

If either is empty, all are returned.

- All rows are returned here. The space before `,` is empty.

## Selecting columns: tidyverse

If you want to select certain columns, use `select()`. For example, select the column `WnMass`.

```{r}
#| echo: true
#| eval: false

MM |> 
  select(WnMass)

```

## Filtering rows: Base R

```{r}
#| echo: true
#| eval: false

MM[1, ]     # Row 1, all columns
MM[1:5, ]   # Rows 1-5, all columns

```

- The space after `,` is empty, so all columns are returned.

## KEVIN 

- Teach slice here?

## Logical Operators 

You can filter with logical or Boolean operators to select various sets. 

- `==` is equal to
- `&` is "and", `|` is "or", `!` is "not"


## Logical Operators {.nostretch}

![](https://imgur.com/MiHIo1n.png){width=80% fig-align="center"}


*Boolean operators. The left circle is x, the right circle is y, and the shaded region indicates the given subset selected.*


## Filtering rows: Base R

```{r}
#| echo: true
#| eval: false

MM[MM$BYear == 2008, ]

```


## Filtering rows: Base R

Use `head()` to get a peek at the first few rows. A second argument to `head()` specifies the number of rows to show.

```{r}
#| echo: true
#| eval: false

head(MM[, c("MouseID", "Sex")], n = 10)

```


## Filtering rows: tidyverse

`filter()`: The first argument is the object to filter, and the following arguments are the expressions for how you want to filter. 

So say we only want to look at female mice.

```{r}
#| echo: true
#| eval: false

filter(MM, Sex == 1)

```


## Filtering

Or we only want to look at female mice with a weaning mass above 15g.

```{r}
#| echo: true
#| eval: false

# tidyverse version 1
filter(MM, Sex == 1, WnMass > 15)

# tidyverse version 2
filter(MM, Sex == 1 & WnMass > 15)

# base
MM[MM$Sex == 1 & MM$WnMass > 15, ]

```


## Filtering

Remember, if we want to use the `|>` we don't have to specify the dataframe.

```{r}
#| echo: true
#| eval: false

MM |>
  filter(Sex == 1, WnMass > 15)

```



## Filtering

Or you could get the same result by asking for mice that are not (`!=`) male.

```{r}
#| echo: true
#| eval: false

MM |>
  filter(Sex != 0, WnMass > 15)

```



## Filtering

Or you want the set of mice from either sire 231x or sire 220x

```{r}
#| echo: true
#| eval: false

MM |>
  filter(SireID == "231x" | SireID == "220x")

```


## Writing Files: tidyverse

- When you have a processed data file you want to save, use `write_csv()`, or `write_txt()`.
- It will save to your working directory.

```{r}
#| echo: true
#| eval: false

M_sub_sires <- MM |>
  filter(SireID == "231x" | SireID == "220x")

write_csv(M_sub_sires, "M_sires_231_220.csv")
```

_Note_ it will always rewrite your old file if you re-run your code. This is a good thing.

## Writing Files: base R

- The functions `write.csv` and `write.txt` are in base R.
- When using these, specify `row.names = FALSE` to prevent the row numbers from saving to the file
- We recommend using the tidyverse versions instead

## KEVIN

write_excel? no, right? comment on it?


## References

::: {#refs}
:::
