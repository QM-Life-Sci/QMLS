---
title: "Data Exploration"
subtitle: "Loading and Initial Exploration"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(readxl)

```


## Base R

- Base R refers to the set of code and functions that is automatically included when you install R

![](../images/Base_ex.png){width=100% fig-align="center"}

## The Tidyverse

<center><img src="https://i.imgur.com/fHQecxu.png" width="85%" />
<br />
<br />
</center>  

- Core Tidyverse packages: ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats. 
- `install.packages("tidyverse")`  
  

## The Tidyverse

You may notice when you load the tidyverse you get a message that says that some libraries overwrite functions in base R. 
  
- For example, dplyr overwrites `filter()` and `lag()`.
    - To use functions from a specific package, you will need to use their full names: `stats::filter()` and `stats::lag()`.

## Should I use base R or Tidyverse?

- Both are useful 
    - Learn the basics of both
    - Learn when one tools is better suited 

## Analysis workflow - Tidy Data

<center>
<br />
<br />
<img src="https://i.imgur.com/fDpfRDA.png" width="85%" />
</center>  
  
## Reading delimited files into R

- csv: `read.csv()`
- tab or otherwise delimited: `read.table()`
- [readr](https://cran.r-project.org/web/packages/readr/index.html), loaded with `tidyverse`
    - `read_delim()`
    - `read_csv()`
    - Like their base R counterparts but with more logical default arguments & behavior


## Reading Excel files into R

Preferred package: [readxl](https://cran.r-project.org/web/packages/readxl/index.html)  
  
## Tibbles  {.smaller}

The tidyverse (via `read_csv()`) reads in files as tibbles instead of data.frames.

-   Also `read_excel()`, `read_table()`, etc

```{r echo=TRUE, message=FALSE}
#dat <- read_csv("../data/composition_data.csv")
#dat
```

```{r}
#| echo: true
#| eval: false
library(readxl)
M <- read_excel("MyFile.xlsx")
```

## Where do your files live?

- To load data into R, you need to tell it where the file is on your computer. 
- R will look relative to the "working directory"
- ALWAYS set this to the "Source File Location" (this is where the script is)
    - Quarto will ALWAYS render this way

## Telling R where to look

```{r}
#| echo: true
#| message: false
#| warning: false


MM <- read_excel("../data/Mouse_Weaning_Data.xlsx",
                na = "NA")
```

Read file and assign to an object `MM`.

- Look for it in the `data` directory, which is one level up from the working directory (`../`)
- Explicitly define "NA" is `NA`

## Important Coding Tips

Use `<-` for assign.

- Don't use `=` (even though you can).
- "Assign the object on the right to the object on the left."




## Use `str()` to get information

```{r}
str(M)
```


## Selecting and filtering

- Selecting columns
- Filtering a subset of rows
- Aggregating summary statistics


## Selecting columns: Base R

```{r eval=FALSE}
M$WnMass
```

`$` returns a single column from a `data.frame`. You'll use this form most often day to day.


## Selecting columns: Base R

```{r eval=FALSE}
M[ , "WnMass"]  # Only the column WnMass
M[ , 1:3]       # Columns 1-3, all rows
```

`[rows, columns]` returns rows and columns from a `data.frame`.

If either is empty, all are returned.

- All rows are returned here. The space before `,` is empty.


## Filtering rows: Base R

```{r eval=FALSE}
M[1, ]     # Row 1, all columns
M[1:5, ]   # Rows 1-5, all columns
```

- The space after `,` is empty, so all columns are returned.


## Filtering rows: Base R

```{r eval=FALSE}
M[M$BYear == 2008, ]
```


## Filtering rows: Base R

Use `head()` to get a peek at the first few rows. A second argument to `head()` specifies the number of rows to show.

```{r}
head(M[, c("MouseID", "Sex")], n = 10)
```


## Select and filter simultaneously: Base R

`subset()` or `[ , ]`

```{r}
subset(M, WnMass < 6)
```


## Select and filter simultaneously: Base R

`subset()` or `[ , ]`

```{r eval=FALSE}
subset(M, Sex == 1 & DamID == 1932, select = "WnMass")
```

Use `&` for "and", and `|` for "or."


## Making new columns

- Calculate new variables
    - Transformation, etc.
- Combine existing variables into a new variable
    - e.g., year, months, day columns into a date
- Splitting existing variables into >1 new variables


## Calculate new variables: Base R

Data transformations:

```{r eval=FALSE}
M$log10_WnMass <- log10(M$WnMass)
M$sqrt_WnMass <- sqrt(M$WnMass)
```

_Note_:

- `log()` performs natural log.
- `log10()` performs base-10 log.


## Aggregating: Base R

- Mean per `DamID` of every column that is not `DamID`.
- Replace `mean` with `sd` to get standard deviation.

```{r warning=FALSE}
M_agr <- aggregate(M, by = list(M$DamID), FUN = "mean")
M_agr
```


## Writing Files

- When you have a file you want to save, use `write.csv()`, or `write_csv()`, or `write.txt()`, or `write_txt()`.

    - With the Base R writing functions, you want to add "row.names = FALSE" to avoid an extra column for row names.

- It will save to your working directory.

```{r eval = FALSE, warning=FALSE}
write_csv(M_agr, "M_aggregate.csv")
```

_Note_ it will always rewrite your old file if you re-run your code.

## References

::: {#refs}
:::
