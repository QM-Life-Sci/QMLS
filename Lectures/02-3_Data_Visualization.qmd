---
title: "Data Visualization"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(readxl)
library(cowplot)
theme_set(theme_cowplot())
library(wesanderson)
library(viridis)

```

## Why Visualize Data? {.nostretch}

![](../images/Workflow.drawio.png){fig-align="center" width="80%"}


## Immediately learn a lot about your data

`PlantGrowth` dataset included in base R

```{r}
#| echo: false

PlantGrowth |>
  ggplot(aes(group, weight)) +
  geom_point(position = position_jitter(width = 0.2), size = 3, alpha = 1/2) +
  stat_summary(fun = mean, geom = "point", size = 5, color = "steelblue") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
               color = "steelblue", linewidth = 1.5)

```

## Visualization is an important part of analysis

- Plant growth data in two groups: control & treatment
- Collected over multiple years

```{r}
#| echo: false

set.seed(38479238)

DD <- tibble(weight = c(rnorm(50, 5, 1), rnorm(40, 5.5, 1), rnorm(10,15,2)),
             group = rep(c("ctrl","treatment"), each = 50),
             year = rep(paste0("year", c(1,2,3,5,4)),each = 10, times = 2))
```

```{r}
#| echo: true

glimpse(DD)

DD |> group_by(group) |>
  summarize(mean = mean(weight))

```

## Visualization is an important part of analysis


```{r}
#| echo: true

t.test(weight ~ group, data = DD)

```

## Visualization is an important part of analysis

```{r}
#| echo: false

DD |>
  ggplot(aes(group, weight)) +
  geom_point(position = position_jitter(width = 0.2), size = 3, alpha = 1/2) +
  stat_summary(fun = mean, geom = "point", size = 5, color = "steelblue") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
               color = "steelblue", linewidth = 1.5) 

```


## Visualization is an important part of analysis

```{r}
#| echo: false

DD |>
  ggplot(aes(group, weight, color = year)) +
  geom_point(position = position_jitter(width = 0.2), size = 3, alpha = 1/2) +
  stat_summary(fun = mean, geom = "point", size = 5, color = "black") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
               color = "black", linewidth = 1.5) 

```


## R plotting systems

1. Base R graphics (e.g., `plot()`, `hist()`)
    - Easy to do easy things (bivariate scatterplot, histogram)
    - Difficult to do complex plots
2. `ggplot2` ("ggplot")
    - Harder to learn, easier to make complex plots
    - Much better graphics and logic


## Basics of ggplot

ggplot graphics

- [ggplot2](https://cran.r-project.org/web/packages/ggplot2/index.html), loaded with `tidyverse`

- Anderson, E. 1935. The irises of the Gaspe Peninsula. *Bulletin of the American Iris Society* 59: 2â€“5.

```{r}
glimpse(iris)
```


## Basics of ggplot

```{r}
#| echo: true
#| eval: false

library(tidyverse)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) + 
  geom_point() 
```

- `ggplot()` sets up the plot using `iris` data.frame.
- `aes()` sets `x` and `y` variables
- `+ geom_point()` adds `(x, y)` points corresponding to `Petal.Length` and `Petal.Width`


## Logic of ggplot

- Building plots up by layers
    - Start simple
- Layers can be:
    - data
    - labels
    - colors
    - regression lines, etc.
- Change the theme (shading, colors, line widths, etc.)


## Logic of ggplot

```{r}
#| echo: true
#| eval: true
#| output-location: slide

library(tidyverse)
library(cowplot)  
theme_set(theme_cowplot()) # Our preferred ggplot theme

ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
  geom_point() 
```


## What would setting only 1 variable do?

```{r}
#| echo: true
#| warning: false
#| message: false
#| output-location: slide


ggplot(iris, aes(x = Petal.Length)) + 
  geom_histogram() 

```

## Building plots: Point color

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) + 
  geom_point(size = 3)

```

- `color = Species` colors points by the _Species_ column (a factor)

## Building plots: Point shape

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 shape = Species)) + 
  geom_point(size = 3)

```

- `shape = Species` encodes _Species_ by the point shape


## Building plots: Point size

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width, shape = Species)) + 
  geom_point(size = 5)

```

- Change point size


## Building plots: Custom color palette

```{r}
#| echo: true
#| output-location: slide

library(wesanderson)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_manual(values = wes_palette("Moonrise2"))
```

- Add an interesting color palette


## Building plots: Custom color palette

```{r}
#| echo: true
#| output-location: slide

library(viridis)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_viridis(discrete = TRUE, option = "viridis")
```

- `library(viridis)` works for colorblind and grayscale friendly images.


## Building plots: Axis labels

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_manual(values = wes_palette("Moonrise2")) +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)",
       title = "Irises")
```

- Add some better axis labels


## Building plots: Regression lines

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) + 
  geom_point(size = 3) +
  geom_smooth(formula = y ~ x, method = "lm") +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)")
```

- `geom_line()` add a "smooth" line (but in this case linear [`lm`])


## Adding lines

What if you add a color aesthetic?

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) +
  geom_smooth(formula = y ~ x, method = "lm") +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)")
```


## Log-log axes

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, 
                 y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) +
  geom_smooth(formula = y ~ x, method = "lm") +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Petal Length (log10 cm)",
       y = "Petal Width (log10 cm)")

```


## Facetting

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length)) + 
  geom_histogram() +
  facet_grid(Species ~ .)
```

- Plots separate histograms for the 3 species in 3 rows
- `facet_grid(. ~ Species)` makes 3 columns


## `_geoms` we will use

- `geom_point()`
- `geom_smooth()`
- `geom_line()`
- `geom_histogram()`
- `geom_density()`
- `geom_boxplot()`
- `geom_dotplot()`


