---
title: "Data Transformation"
subtitle: "The biggest time investment during data analysis"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---
## Analysis workflow - Tidy Data {.nostretch}

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(readxl)
library(cowplot)
theme_set(theme_cowplot())


```

<!--
Datasets
  bats.csv
-->


![](../images/Workflow.drawio.png){fig-align="center" width="40%"}

Perform all manipulation via code (in R)

- Preserves data integrity
- The "hard" way now is the easy way in the long run

  
## Useful transformation functions

- `separate()`
- `unite()`
- `filter()`
- `select()`
- `mutate()` and `transmute()`
- `arrange()`
- `summarize()`


## Eastern Red Bat morphology data

<center><img src="https://imgur.com/vG2psDp.png" width="100%" /></center>  


## Eastern Red Bat morphology data

<center><img src="https://imgur.com/RHmGsV8.png" width="100%" /></center>  



## Eastern Red Bat morphology data

```{r}
#| echo: true
#| message: false
#| warning: false

bats <- read_csv("../data/bats.csv")
bats[1:10,]
```


## `unite()` {.smaller}

Turns two columns into one. The default for `sep` is an underscore (_), so if you want something different you must specify.

```{r}
#| echo: true

bats <- 
  bats |>
  unite("age_sex", age:sex)

```


## `separate()`  {.smaller}

Pulls apart one column into multiple columns wherever a separator appears.


```{r}
#| echo: true

bats <- 
  bats |>
  separate(age_sex, into = c("age","sex"), sep = "_")

```


## `arrange()` {.smaller}

The function `arrange()` sorts by both ascending numerical and alphabetical order, but you can flip this to descending order with `desc()`.
  
  - `arrange()` always puts `NA`'s at the end, no matter if your sort in ascending or descending order.

```{r}
#| echo: true
#| message: false

bats |>
  arrange(desc(avg_temp), desc(condition), desc(RFA))
```


## `mutate()` and `transmute()` {.smaller}

Mutate always adds a new column at the end of the data. So say you want to know the ratio of each bat's right forearm length (RFA) to its bodymass (mass).


```{r}
#| echo: true
#| message: false

bats |>
  mutate(ratio = RFA / mass)
```

## `mutate()` and `transmute()` {.smaller}

If all you care about is the new variable, use `transmute()`

```{r}
#| echo: true
#| message: false

bats |> 
  transmute(ratio = RFA / mass)

```

## Create new variables with base R

- Same result as mutate:

```{r}
#| echo: true
#| message: false

bats$ratio <- bats$RFA / bats$mass
bats[1:5,]
```

- Same result as transmutate:

```{r}
#| echo: true
#| message: false

ratio <- bats$RFA / bats$mass
ratio[1:5]

```


## Useful Creation Functions

There are a lot of useful functions for creating new variables out there.  Examples include: 

- Arithmetic operators: `+, -, *, /, ^`
- Logs: `log()` - which is a natural log, `log2()`, `log10()`
- Offsets: `lead()`, `lag()`
- Cumulative: `cumsum()`, `cumprod()`, ..., etc
- Ranking: `min_rank()`, `row_number()`, `percent_rank()`, ..., etc


## `summarize()`

This is a very useful function. And allows you to collapse parts of tibbles into a single row (i.e. summarize your data based on specifications). So say we want to get an average mass of bats  

```{r}
#| echo: true
#| message: false

bats |> 
  summarize(avg_mass = mean(mass))
```


## `summarize()` and `group_by()` {.smaller}

If you want to summarize by multiple groups, use `group_by()` and `|>`

```{r,  echo=TRUE, message=FALSE}
#| echo: true
#| message: false

bats |> 
  group_by(sex) |>
  summarize(avg_mass = mean(mass))
```

```{r,  echo=TRUE, message=FALSE}
#| echo: true
#| message: false

bats |>
  group_by(sex, age) |>
  summarize(avg_mass = mean(mass))
```


## `summarize()`

Here are some of the many functions that can be useful with `summarize()`

- **Exploratory statistics:** `mean(x)`, `median(x)`, `sd(x)`, `IQR(x)`
- **Measures of rank or position:** `min(x)`, `quantile(x, c(0.05, 0.95))`, `max(x)`, `first(x)`, `nth(x, 2)`, `last(x)`
- **Counts:** `n()` - size of current group, `sum(x)` (try `sum(~is.na(x))` to make sure you don't include `NA`'s), `n_distinct(x)` - the number of unique elements


## Combine functions to explore data! {.smaller}

Summarize by group and arrange by mass

```{r,  echo=TRUE, message=FALSE}
bats %>% 
  group_by(sex, age, condition) %>%
  summarize(avg_mass = mean(mass)) %>%
  arrange(desc(avg_mass))
```


## Combine functions to explore data!  {.smaller}

Find all groups bigger than a threshold

```{r,  echo=TRUE, message=FALSE}
bats %>% 
  group_by(sex, age) %>%
  filter(mass > 15)
```


## References

::: {#refs}
:::
