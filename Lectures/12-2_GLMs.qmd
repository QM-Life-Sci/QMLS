---
title: "Generalized Linear Models"
subtitle: "Non-normal outcome variables"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---


## *Generalized* linear models

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(cowplot)
library(readxl)
library(GGally)
library(ggrepel)
library(car)
theme_set(theme_cowplot())
```

$$\mbox{Response variable(s)} \sim \mbox{Predictor variable(s)} + \mbox{Error}$$

Distribution of the response variable(s) can be:

1. Normal (Gaussian)
1. Binomial (two states)
1. Poisson (counts)
1. Many others


## A miscellanea of distributions {.nostretch}

![](https://i.imgur.com/Mks8NPD.png"){fig-align="center" width="80%"}


## General equation form of GLMs

$$Y = \beta_0 + \beta_1X_1 + \beta_2X_2 + \dots + \beta_nX_n$$

$Y$ follows some distribution (e.g., $Y \sim \mathcal{N}$ or $Y \sim \mbox{Binom}$)

- Most often normal.

$X_n$  are some combination of continuous and categorical predictors.

$\beta_n$ are the parameter estimates for the $X$.


## Logistic regression

Outcome variable is categorical:

- Heart disease
- Diabetes
- Cancer

Predictors can be a mix of categorical and continuous variables:

- sex, smoking status, family history of ...
- body mass, BMI, blood glucose level


## Logistic regression

What are the predictors of presence or absence?

- Morphology
- Character state
- Species
- Rain

## Link functions

"Linearize" the outcome variable

1. Gaussian: Identity
1. Binomial: Logit
1. Poisson: Log


## Logistic regression

$$\mbox{logit}(Y) = \beta_0 + \beta_1X_1 + \beta_2X_2 + \dots + \beta_nX_n$$

The logit "transformation" allows $\beta$s to be estimated iteratively.

Fitting in R:

- `glm()` uses the formula interface
- `family = ` determines the link function


## Logit function

$$logit(p) = \ln \left( \frac{p}{1-p} \right)$$

```{r}
#| fig-align: center

Ps <- tibble(p = seq(0.001, 0.999, length.out = 200),
             l = log(p / (1-p)))

ggplot(Ps, aes(p, l)) +
  geom_hline(yintercept = 0) +
  geom_line(linewidth = 2, color = "navy") +
  labs(y = "logit(p)") +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1))

```


## Logistic regression

```{r}
set.seed(4)
rainfall <- c(runif(20, 100, 160),
              runif(20, 160, 210)) |> round()
presence <- c(rbinom(20, 1, 0.15),
              rbinom(20, 1, 0.95))
LogReg <- data.frame(Rainfall = rainfall,
                     Presence = as.factor(presence))
LogReg
```


## Fitting a logistic model

```{r}
#| echo: true

fm <- glm(Presence ~ Rainfall,
          data = LogReg,
          family = "binomial")
```

*Note*: `Presence` is a factor with two levels


## Summarizing

```{r}
summary(fm)
```


## Summarizing with `logistic.display()`

```{r}
#| message: false

library(epiDisplay)
logistic.display(fm)
```


## Back-transforming to probability

`logistic()` back-transforms the logit function

```{r}
#| echo: true

logistic <- function (x) {
  p <- 1/(1 + exp(-x))
  p <- ifelse(x == Inf, 1, p)
  p
}

logistic(coef(fm)[2])
```


## Odds ratio

- The probability of an event divided by the probability of *not* that event.

$$OR = \frac{p}{1 - p}$$

```{r}
#| echo: true

logistic(coef(fm)[2]) / (1 - logistic(coef(fm)[2]))
```


## Visualizing

```{r}
#| echo: true
#| output-location: slide

ggplot(LogReg, aes(x = Rainfall,
                   y = as.numeric(Presence) - 1)) +
  geom_hline(yintercept = 0.5, linetype = "dotted", size = 0.5) +
  geom_smooth(formula = y ~ x,
              method = "glm",
              method.args = list(family = "binomial"),
              se = FALSE, linewidth = 2) +
  geom_point(size = 3) +
  ylab("Probability of Presence") +
  xlab("Rainfall (cm/y)") +
  scale_y_continuous(breaks = seq(0, 1, by = 0.1))
```


## Presence of sole

![](https://i.imgur.com/tippc8A.jpg){fig-align="center"}


## Presence of sole

Presence/absence of sole in the Tagus estuary of Portugal.

```{r}
#| echo: true

M <- read_excel("../data/Sole.xlsx")
str(M)
```


## Presence of sole

```{r}
#| echo: true

fm <- glm(Solea_solea ~ salinity, data = M, family = "binomial")

summary(fm)
```


## Presence of sole

```{r}
#| echo: true

logistic.display(fm)
```


## Presence of sole

```{r}
ggplot(M, aes(x = salinity, y = Solea_solea)) +
  geom_hline(yintercept = 0.5, linetype = "dotted", size = 0.5) +
  geom_smooth(formula = y ~ x,
              method = "glm",
              method.args = list(family = "binomial"),
              se = FALSE, linewidth = 2) +
  geom_point(size = 3) +
  ylab("Probability of Presence") +
  xlab("Salinity") +
  scale_y_continuous(breaks = seq(0, 1, by = 0.1))
```


## Poisson regression for counts

- Non-negative counts
- Observations per some unit of area or time
    - Plants per hectare
    - Mutations per chromosome
    - Cases of a disease per X thousand people
    - Etc.


## Peculiarities of Poisson Distrbutions

```{r}
#| echo: true
set.seed(3746382)

x <- rpois(1e4, lambda = 15)
```

Mean == Variance

```{r}
#| echo: true
mean(x)
var(x)
```

Excess zero counts is *overdispersion* ("zero-inflated").


## Oceanic tools

```{r}
OT <- read_csv("../data/Oceanic_tools.csv", show_col_types = FALSE)
OT
```

Data from Kline and Boyd [-@Kline2010-yk]


## Mapping

```{r}
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)

world <- ne_countries(scale = "medium", returnclass = "sf")

OT_sites <- st_as_sf(OT |> slice(1:8),
                     coords = c('Lon', 'Lat'), crs = 4326,
                     agr = "constant")

ggplot(data = world) +
  geom_sf() +
  geom_text_repel(data = OT |> slice(1:8),
                  seed = 235553,
                  aes(x = Lon, y = Lat, label = Culture), 
                  box.padding = 0.75,
                  fontface = "bold") +
  geom_sf(data = OT_sites, size = 4, color = "firebrick4") +
  annotate(geom = "text", label = "Tonga and Hawai'i not shown",
           x = 175, y = 10, size = 5) +
  coord_sf(xlim = c(135, 185), ylim = c(-20, 12), expand = FALSE) +
  labs(x = "Longitude", y = "Latitude")

```


## Number of tools

```{r}
p <- ggplot(OT, aes(y = Total_tools, x = log_Population)) +
  geom_point(color = "firebrick4", size = 4) +
  labs(x = "log(Population Size)", y = "Total Number of Tools") +
  theme(axis.title = element_text(face = "bold"))
p
```


## GLM

Estimates are on the log-sacle.

```{r}
fm_pois <- glm(Total_tools ~ log_Population,
               family = poisson, 
               data = OT)
summary(fm_pois)
```


## Why not just use a Gaussian model?

```{r}
#| echo: true

fm_gauss <- lm(Total_tools ~ log_Population,
               data = OT)
summary(fm_gauss)
```


## Prediction

```{r}
preds <- data.frame(log_Population = seq(7, 13, length.out = 200))
preds <- preds |> 
  mutate(pred_pois = exp(predict(fm_pois, newdata = preds)),
         pred_gauss = predict(fm_gauss, newdata = preds)) |> 
  pivot_longer(cols = -log_Population) |> 
  mutate(Model = if_else(name == "pred_gauss", "Gaussian", "Poisson"))

p +
  geom_line(data = preds,
            aes(x = log_Population, y = value, color = Model),
            linewidth = 1.5) +
  scale_color_manual(values = c("#345995", "#EAC435"))

```


## Prediction

```{r}
preds <- data.frame(log_Population = seq(0, 13, length.out = 200))
preds <- preds |> 
  mutate(pred_pois = exp(predict(fm_pois, newdata = preds)),
         pred_gauss = predict(fm_gauss, newdata = preds)) |> 
  pivot_longer(cols = -log_Population) |> 
  mutate(Model = if_else(name == "pred_gauss", "Gaussian", "Poisson"))

p +
  geom_line(data = preds,
            aes(x = log_Population, y = value, color = Model),
            linewidth = 1.5) +
  scale_color_manual(values = c("#345995", "#EAC435"))
```

## Generalized linear multilevel models

Generalization of Gaussian multilevel models to all the kinds of predictors that generalized linear models can be used for

Large can of worms:

- http://glmm.wikidot.com/faq


## References

::: {#refs}
:::
